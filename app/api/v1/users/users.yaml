openapi: 3.0.3
info:
  title: Users API
  version: 1.0.0
  description: API для управління користувачами
servers:
  - url: /api/v1

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: apiKey

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        createdAt: { type: string, format: date-time }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }
        password: { type: string }
        role: { type: string, enum: [admin, guest, driver, passenger] }
        license: { type: string }

    UserInput:
      type: object
      required: [email, password, firstName, lastName, role, phone]
      properties:
        email: { type: string }
        password: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        role: { type: string, enum: [admin, guest, driver, passenger] }
        phone: { type: string }
        license: { type: string }

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        meta:
          type: object
          properties:
            page: { type: integer }
            limit: { type: integer }
            total: { type: integer }
            totalPages: { type: integer }

    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        errorMessage: { type: string }

paths:
  /users:
    get:
      summary: Отримати список користувачів
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: select
          schema: { type: string, description: "firstName,id,email,..." }
        - in: query
          name: email
          schema: { type: string }
        - in: query
          name: filter[ids]
          schema: { type: string, example: "1,2,3" }
        - in: header
          name: apiKey
          required: true
          schema: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserListResponse" }
        400:
          description: Invalid select
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        401:
          description: Invalid API key
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        500:
          description: Internal error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

    post:
      summary: Створити користувача
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserInput" }
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Invalid data
        401:
          description: Invalid API key
        409:
          description: User already exists
        500:
          description: Internal error

  /users/{id}:
    get:
      summary: Отримати користувача по ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: select
          schema: { type: string }
        - in: header
          name: apiKey
          required: true
          schema: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        401:
          description: Invalid API key
        404:
          description: User not found
        500:
          description: Internal error

    delete:
      summary: Видалити користувача по ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: header
          name: apiKey
          required: true
          schema: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        401:
          description: Invalid API key
        404:
          description: User not found
        500:
          description: Internal error
