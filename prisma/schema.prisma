generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  firstName           String
  lastName            String
  email               String                @unique
  phone               String?               @unique
  password            String
  role                String
  license             String
  apiKey              String?               @unique // Додайте це поле
  routes              RouteDriver[] // Зв'язок з RouteDriver
  // orders              OrderedRoute[] // Зв'язок із замовленими маршрутами
  passengersSeatsList PassengersSeatsList[]
}

model RouteDriver {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  driverId            Int
  user                User                  @relation(fields: [driverId], references: [id])
  departureDate       DateTime
  arrivalDate         DateTime
  departureFrom       String
  arrivalTo           String
  busNumber           String
  maxSeats            Int
  bookedSeats         Int
  selectBusLayout     String
  routePrice          Int
  notate              String?
  wifi                Boolean               @default(false)
  coffee              Boolean               @default(false)
  power               Boolean               @default(false)
  restRoom            Boolean               @default(false)
  modelBus            String // Модель автобуса
  intermediateStops   IntermediateStop[] // Проміжні зупинки
  busSeats            BusSeat[] // Зв'язок з BusSeat
  // orders              OrderedRoute[]
  passengersSeatsList PassengersSeatsList[]
}

model BusSeat {
  id            Int         @id @default(autoincrement())
  passenger     Int?
  number        Int
  busSeatStatus String
  routeDriverId Int
  routeDriver   RouteDriver @relation(fields: [routeDriverId], references: [id], onDelete: Cascade)
}

model PassengersSeatsList {
  id                Int                 @id @default(autoincrement())
  idPassenger       Int
  user              User                @relation(fields: [idPassenger], references: [id], onDelete: Cascade)
  routeDriverId     Int
  routeDriver       RouteDriver         @relation(fields: [routeDriverId], references: [id], onDelete: Cascade)
  subPassengersList SubPassengersList[]

  @@unique([routeDriverId, idPassenger]) // Додаємо унікальний індекс
}

model SubPassengersList {
  id                    Int                 @id @default(autoincrement())
  passengersSeatsListId Int
  passengersSeatsList   PassengersSeatsList @relation(fields: [passengersSeatsListId], references: [id], onDelete: Cascade)
  subFirstName          String
  subLastName           String
  subPhone              String
  subEmail              String
}

model IntermediateStop {
  id       Int          @id @default(autoincrement())
  stopName String
  routeId  Int?
  route    RouteDriver? @relation(fields: [routeId], references: [id], onDelete: Cascade)
}

// model OrderedRoute {
//   id            Int         @id @default(autoincrement())
//   passengerId   Int
//   user          User        @relation(fields: [passengerId], references: [id], onDelete: Cascade)
//   routeDriverId Int
//   routeDriver   RouteDriver @relation(fields: [routeDriverId], references: [id], onDelete: Cascade)
//   orderDate     DateTime    @default(now())
//   orderSeats    OrderSeat[]
// }

// model OrderSeat {
//   id         Int          @id @default(autoincrement())
//   seatNumber Int
//   orderId    Int
//   order      OrderedRoute @relation(fields: [orderId], references: [id], onDelete: Cascade)
// }
